[DribbleAlround]

#if true -> robot will dribble as if it had ball without ball so you can see the wheel rotation without ball
# if false -> robot will pull with speedNoBall from Dribble Conf when it has no ball
testingMode = true


#function, which transforms the final desired velocity of the wheels to input voltage of motors
velAt2000 = 445
velAt3500 = 1247


#these override calculations when speed is too low (y-velocity between staticUpper and staticLowerBound)
	#until this forward x-speed, the wheels have velocity 0 to not push the ball out of the kicker
	staticUpperBound = 200
	#until this forward x-speed, we pull minimum backwards velocity
	staticMiddleBound = 100
	#until this backward x-speed, we pull minimum backward velocity
	staticLowerBound = -200


			#!!!not used in the moment!!!
			#static backwards correction
			#the velocity in x direction is always corrected backwards by this 
			staticNegVelX = 500


#relative backwards correction
#epsilonT<1 ; epsilonY<0.45*velYFactor
#to ensure that change between robot velocity angle and desired ball velocity angle is consistent

	#corrects the x-Velocity backwards, relative to the robot-x-Velocity
	#example epsilonT = 0.5 : x=1 - >0.5; x=-1 -> -1.5
	epsilonT = 0.5
	epsilonTForward = 0.6
	epsilonTBackward = 0.4

	#corrects the x-Velocity backwards, relative to the robot-y-Velocity
	epsilonY = 0.37

	#corrects x-velocity backwards, relative to ball-y-speed that results from rotation (if driving sideways) or relative to pow(rotation)(if not driving sideways)  
	#epsilonRot of 1 resembles pulling in a 45Â°angle backwards, when rotating on place
	epsilonRot = 1.2
	#describes the nonlinearity with which the rotation is treated -> experience tells > 1
	powerOfRotation = 2.3


#is applied to velocities after correction
#Please keep it 1 if possible
velYFactor = 1
velXFactor = 1


# to increase initial backward actuator speed to grab the ball when the robot starts moving

# for higher grip when starting motion, we multiply the x-velocity with (1+powerFactor) for the first iteration, the powerfactor decays with the decayFactor every iteration
powerFactor = 0.3
# decayFactor < 1 !!!
decayFactor = 0.9

#if an odometry value changes more than these in one iteration it is regarded as a jump and the above values jump into action
transTolerance = 500
rotTolerance = 1.5
angleTolerance = 0.4




#distance between robot rotation axis and ball center
rBallRobot = 300


[!DribbleAlround]
